<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Documents/Types/DocumentTypeDescription.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Documents\Types;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Documents.Types.DocumentVersion
 */
class DocumentVersion extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Version required string = 1
     *
     * @var string
     */
    protected $Version = null;

    /**
     * SupportsContentPatching required bool = 2
     *
     * @var bool
     */
    protected $SupportsContentPatching = null;

    /**
     * SupportsEncrypting required bool = 3
     *
     * @var bool
     */
    protected $SupportsEncrypting = null;

    /**
     * Titles repeated message = 4
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle>
     */
    protected $Titles = null;

    /**
     * IsActual required bool = 5
     *
     * @var bool
     */
    protected $IsActual = null;

    /**
     * Workflows repeated message = 6
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentWorkflow>
     */
    protected $Workflows = null;

    /**
     * SupportsPredefinedRecipientTitle required bool = 7
     *
     * @var bool
     */
    protected $SupportsPredefinedRecipientTitle = null;

    /**
     * Check if 'Version' has a value
     *
     * @return bool
     */
    public function hasVersion()
    {
        return $this->Version !== null;
    }

    /**
     * Get 'Version' value
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->Version;
    }

    /**
     * Set 'Version' value
     *
     * @param string $value
     */
    public function setVersion($value)
    {
        $this->Version = $value;
    }

    /**
     * Check if 'SupportsContentPatching' has a value
     *
     * @return bool
     */
    public function hasSupportsContentPatching()
    {
        return $this->SupportsContentPatching !== null;
    }

    /**
     * Get 'SupportsContentPatching' value
     *
     * @return bool
     */
    public function getSupportsContentPatching()
    {
        return $this->SupportsContentPatching;
    }

    /**
     * Set 'SupportsContentPatching' value
     *
     * @param bool $value
     */
    public function setSupportsContentPatching($value)
    {
        $this->SupportsContentPatching = $value;
    }

    /**
     * Check if 'SupportsEncrypting' has a value
     *
     * @return bool
     */
    public function hasSupportsEncrypting()
    {
        return $this->SupportsEncrypting !== null;
    }

    /**
     * Get 'SupportsEncrypting' value
     *
     * @return bool
     */
    public function getSupportsEncrypting()
    {
        return $this->SupportsEncrypting;
    }

    /**
     * Set 'SupportsEncrypting' value
     *
     * @param bool $value
     */
    public function setSupportsEncrypting($value)
    {
        $this->SupportsEncrypting = $value;
    }

    /**
     * Check if 'Titles' has a value
     *
     * @return bool
     */
    public function hasTitlesList()
    {
        return $this->Titles !== null;
    }

    /**
     * Get 'Titles' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle>
     */
    public function getTitlesList()
    {
        return $this->Titles;
    }

    /**
     * Set 'Titles' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle> $value
     */
    public function setTitlesList(\Protobuf\Collection $value = null)
    {
        $this->Titles = $value;
    }

    /**
     * Add a new element to 'Titles'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle $value
     */
    public function addTitles(\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle $value)
    {
        if ($this->Titles === null) {
            $this->Titles = new \Protobuf\MessageCollection();
        }

        $this->Titles->add($value);
    }

    /**
     * Check if 'IsActual' has a value
     *
     * @return bool
     */
    public function hasIsActual()
    {
        return $this->IsActual !== null;
    }

    /**
     * Get 'IsActual' value
     *
     * @return bool
     */
    public function getIsActual()
    {
        return $this->IsActual;
    }

    /**
     * Set 'IsActual' value
     *
     * @param bool $value
     */
    public function setIsActual($value)
    {
        $this->IsActual = $value;
    }

    /**
     * Check if 'Workflows' has a value
     *
     * @return bool
     */
    public function hasWorkflowsList()
    {
        return $this->Workflows !== null;
    }

    /**
     * Get 'Workflows' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentWorkflow>
     */
    public function getWorkflowsList()
    {
        return $this->Workflows;
    }

    /**
     * Set 'Workflows' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentWorkflow> $value
     */
    public function setWorkflowsList(\Protobuf\Collection $value = null)
    {
        $this->Workflows = $value;
    }

    /**
     * Add a new element to 'Workflows'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentWorkflow $value
     */
    public function addWorkflows(\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentWorkflow $value)
    {
        if ($this->Workflows === null) {
            $this->Workflows = new \Protobuf\MessageCollection();
        }

        $this->Workflows->add($value);
    }

    /**
     * Check if 'SupportsPredefinedRecipientTitle' has a value
     *
     * @return bool
     */
    public function hasSupportsPredefinedRecipientTitle()
    {
        return $this->SupportsPredefinedRecipientTitle !== null;
    }

    /**
     * Get 'SupportsPredefinedRecipientTitle' value
     *
     * @return bool
     */
    public function getSupportsPredefinedRecipientTitle()
    {
        return $this->SupportsPredefinedRecipientTitle;
    }

    /**
     * Set 'SupportsPredefinedRecipientTitle' value
     *
     * @param bool $value
     */
    public function setSupportsPredefinedRecipientTitle($value)
    {
        $this->SupportsPredefinedRecipientTitle = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Version'])) {
            throw new \InvalidArgumentException('Field "Version" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['SupportsContentPatching'])) {
            throw new \InvalidArgumentException('Field "SupportsContentPatching" (tag 2) is required but has no value.');
        }

        if ( ! isset($values['SupportsEncrypting'])) {
            throw new \InvalidArgumentException('Field "SupportsEncrypting" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['IsActual'])) {
            throw new \InvalidArgumentException('Field "IsActual" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['SupportsPredefinedRecipientTitle'])) {
            throw new \InvalidArgumentException('Field "SupportsPredefinedRecipientTitle" (tag 7) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'Titles' => [],
            'Workflows' => [],
        ], $values);

        $message->setVersion($values['Version']);
        $message->setSupportsContentPatching($values['SupportsContentPatching']);
        $message->setSupportsEncrypting($values['SupportsEncrypting']);
        $message->setIsActual($values['IsActual']);
        $message->setSupportsPredefinedRecipientTitle($values['SupportsPredefinedRecipientTitle']);

        foreach ($values['Titles'] as $item) {
            $message->addTitles($item);
        }

        foreach ($values['Workflows'] as $item) {
            $message->addWorkflows($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DocumentVersion',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'Version',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'SupportsContentPatching',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'SupportsEncrypting',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'Titles',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Types.DocumentTitle'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'IsActual',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'Workflows',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Types.DocumentWorkflow'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'SupportsPredefinedRecipientTitle',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Version === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentVersion#Version" (tag 1) is required but has no value.');
        }

        if ($this->SupportsContentPatching === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentVersion#SupportsContentPatching" (tag 2) is required but has no value.');
        }

        if ($this->SupportsEncrypting === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentVersion#SupportsEncrypting" (tag 3) is required but has no value.');
        }

        if ($this->IsActual === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentVersion#IsActual" (tag 5) is required but has no value.');
        }

        if ($this->SupportsPredefinedRecipientTitle === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentVersion#SupportsPredefinedRecipientTitle" (tag 7) is required but has no value.');
        }

        if ($this->Version !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->Version);
        }

        if ($this->SupportsContentPatching !== null) {
            $writer->writeVarint($stream, 16);
            $writer->writeBool($stream, $this->SupportsContentPatching);
        }

        if ($this->SupportsEncrypting !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeBool($stream, $this->SupportsEncrypting);
        }

        if ($this->Titles !== null) {
            foreach ($this->Titles as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->IsActual !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeBool($stream, $this->IsActual);
        }

        if ($this->Workflows !== null) {
            foreach ($this->Workflows as $val) {
                $writer->writeVarint($stream, 50);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->SupportsPredefinedRecipientTitle !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeBool($stream, $this->SupportsPredefinedRecipientTitle);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->Version = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->SupportsContentPatching = $reader->readBool($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->SupportsEncrypting = $reader->readBool($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle();

                if ($this->Titles === null) {
                    $this->Titles = new \Protobuf\MessageCollection();
                }

                $this->Titles->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsActual = $reader->readBool($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentWorkflow();

                if ($this->Workflows === null) {
                    $this->Workflows = new \Protobuf\MessageCollection();
                }

                $this->Workflows->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->SupportsPredefinedRecipientTitle = $reader->readBool($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Version !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->Version);
        }

        if ($this->SupportsContentPatching !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->SupportsEncrypting !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->Titles !== null) {
            foreach ($this->Titles as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->IsActual !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->Workflows !== null) {
            foreach ($this->Workflows as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->SupportsPredefinedRecipientTitle !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Version = null;
        $this->SupportsContentPatching = null;
        $this->SupportsEncrypting = null;
        $this->Titles = null;
        $this->IsActual = null;
        $this->Workflows = null;
        $this->SupportsPredefinedRecipientTitle = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentVersion) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Version = ($message->Version !== null) ? $message->Version : $this->Version;
        $this->SupportsContentPatching = ($message->SupportsContentPatching !== null) ? $message->SupportsContentPatching : $this->SupportsContentPatching;
        $this->SupportsEncrypting = ($message->SupportsEncrypting !== null) ? $message->SupportsEncrypting : $this->SupportsEncrypting;
        $this->Titles = ($message->Titles !== null) ? $message->Titles : $this->Titles;
        $this->IsActual = ($message->IsActual !== null) ? $message->IsActual : $this->IsActual;
        $this->Workflows = ($message->Workflows !== null) ? $message->Workflows : $this->Workflows;
        $this->SupportsPredefinedRecipientTitle = ($message->SupportsPredefinedRecipientTitle !== null) ? $message->SupportsPredefinedRecipientTitle : $this->SupportsPredefinedRecipientTitle;
    }


}

