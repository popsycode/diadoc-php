<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : Documents/Types/DocumentTypeDescription.proto
 */


namespace AgentSIB\Diadoc\Api\Proto\Documents\Types;

/**
 * Protobuf message : AgentSIB.Diadoc.Api.Proto.Documents.Types.DocumentTitle
 */
class DocumentTitle extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * Index required int32 = 7
     *
     * @var int
     */
    protected $Index = null;

    /**
     * IsFormal required bool = 1
     *
     * @var bool
     */
    protected $IsFormal = null;

    /**
     * XsdUrl optional string = 2
     *
     * @var string
     */
    protected $XsdUrl = null;

    /**
     * UserDataXsdUrl optional string = 5
     *
     * @var string
     */
    protected $UserDataXsdUrl = null;

    /**
     * SignerInfo required message = 6
     *
     * @var \AgentSIB\Diadoc\Api\Proto\Documents\Types\SignerInfo
     */
    protected $SignerInfo = null;

    /**
     * MetadataItems repeated message = 3
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem>
     */
    protected $MetadataItems = null;

    /**
     * EncryptedMetadataItems repeated message = 4
     *
     * @var \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem>
     */
    protected $EncryptedMetadataItems = null;

    /**
     * Check if 'Index' has a value
     *
     * @return bool
     */
    public function hasIndex()
    {
        return $this->Index !== null;
    }

    /**
     * Get 'Index' value
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->Index;
    }

    /**
     * Set 'Index' value
     *
     * @param int $value
     */
    public function setIndex($value)
    {
        $this->Index = $value;
    }

    /**
     * Check if 'IsFormal' has a value
     *
     * @return bool
     */
    public function hasIsFormal()
    {
        return $this->IsFormal !== null;
    }

    /**
     * Get 'IsFormal' value
     *
     * @return bool
     */
    public function getIsFormal()
    {
        return $this->IsFormal;
    }

    /**
     * Set 'IsFormal' value
     *
     * @param bool $value
     */
    public function setIsFormal($value)
    {
        $this->IsFormal = $value;
    }

    /**
     * Check if 'XsdUrl' has a value
     *
     * @return bool
     */
    public function hasXsdUrl()
    {
        return $this->XsdUrl !== null;
    }

    /**
     * Get 'XsdUrl' value
     *
     * @return string
     */
    public function getXsdUrl()
    {
        return $this->XsdUrl;
    }

    /**
     * Set 'XsdUrl' value
     *
     * @param string $value
     */
    public function setXsdUrl($value = null)
    {
        $this->XsdUrl = $value;
    }

    /**
     * Check if 'UserDataXsdUrl' has a value
     *
     * @return bool
     */
    public function hasUserDataXsdUrl()
    {
        return $this->UserDataXsdUrl !== null;
    }

    /**
     * Get 'UserDataXsdUrl' value
     *
     * @return string
     */
    public function getUserDataXsdUrl()
    {
        return $this->UserDataXsdUrl;
    }

    /**
     * Set 'UserDataXsdUrl' value
     *
     * @param string $value
     */
    public function setUserDataXsdUrl($value = null)
    {
        $this->UserDataXsdUrl = $value;
    }

    /**
     * Check if 'SignerInfo' has a value
     *
     * @return bool
     */
    public function hasSignerInfo()
    {
        return $this->SignerInfo !== null;
    }

    /**
     * Get 'SignerInfo' value
     *
     * @return \AgentSIB\Diadoc\Api\Proto\Documents\Types\SignerInfo
     */
    public function getSignerInfo()
    {
        return $this->SignerInfo;
    }

    /**
     * Set 'SignerInfo' value
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Types\SignerInfo $value
     */
    public function setSignerInfo(\AgentSIB\Diadoc\Api\Proto\Documents\Types\SignerInfo $value)
    {
        $this->SignerInfo = $value;
    }

    /**
     * Check if 'MetadataItems' has a value
     *
     * @return bool
     */
    public function hasMetadataItemsList()
    {
        return $this->MetadataItems !== null;
    }

    /**
     * Get 'MetadataItems' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem>
     */
    public function getMetadataItemsList()
    {
        return $this->MetadataItems;
    }

    /**
     * Set 'MetadataItems' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem> $value
     */
    public function setMetadataItemsList(\Protobuf\Collection $value = null)
    {
        $this->MetadataItems = $value;
    }

    /**
     * Add a new element to 'MetadataItems'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem $value
     */
    public function addMetadataItems(\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem $value)
    {
        if ($this->MetadataItems === null) {
            $this->MetadataItems = new \Protobuf\MessageCollection();
        }

        $this->MetadataItems->add($value);
    }

    /**
     * Check if 'EncryptedMetadataItems' has a value
     *
     * @return bool
     */
    public function hasEncryptedMetadataItemsList()
    {
        return $this->EncryptedMetadataItems !== null;
    }

    /**
     * Get 'EncryptedMetadataItems' value
     *
     * @return \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem>
     */
    public function getEncryptedMetadataItemsList()
    {
        return $this->EncryptedMetadataItems;
    }

    /**
     * Set 'EncryptedMetadataItems' value
     *
     * @param \Protobuf\Collection<\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem> $value
     */
    public function setEncryptedMetadataItemsList(\Protobuf\Collection $value = null)
    {
        $this->EncryptedMetadataItems = $value;
    }

    /**
     * Add a new element to 'EncryptedMetadataItems'
     *
     * @param \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem $value
     */
    public function addEncryptedMetadataItems(\AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem $value)
    {
        if ($this->EncryptedMetadataItems === null) {
            $this->EncryptedMetadataItems = new \Protobuf\MessageCollection();
        }

        $this->EncryptedMetadataItems->add($value);
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['Index'])) {
            throw new \InvalidArgumentException('Field "Index" (tag 7) is required but has no value.');
        }

        if ( ! isset($values['IsFormal'])) {
            throw new \InvalidArgumentException('Field "IsFormal" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['SignerInfo'])) {
            throw new \InvalidArgumentException('Field "SignerInfo" (tag 6) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'XsdUrl' => null,
            'UserDataXsdUrl' => null,
            'MetadataItems' => [],
            'EncryptedMetadataItems' => []
        ], $values);

        $message->setIndex($values['Index']);
        $message->setIsFormal($values['IsFormal']);
        $message->setXsdUrl($values['XsdUrl']);
        $message->setUserDataXsdUrl($values['UserDataXsdUrl']);
        $message->setSignerInfo($values['SignerInfo']);

        foreach ($values['MetadataItems'] as $item) {
            $message->addMetadataItems($item);
        }

        foreach ($values['EncryptedMetadataItems'] as $item) {
            $message->addEncryptedMetadataItems($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'DocumentTitle',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'Index',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'IsFormal',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'XsdUrl',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'UserDataXsdUrl',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'SignerInfo',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Types.SignerInfo'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'MetadataItems',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'EncryptedMetadataItems',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.AgentSIB.Diadoc.Api.Proto.Documents.Types.DocumentMetadataItem'
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->Index === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentTitle#Index" (tag 7) is required but has no value.');
        }

        if ($this->IsFormal === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentTitle#IsFormal" (tag 1) is required but has no value.');
        }

        if ($this->SignerInfo === null) {
            throw new \UnexpectedValueException('Field "\\AgentSIB\\Diadoc\\Api\\Proto\\Documents\\Types\\DocumentTitle#SignerInfo" (tag 6) is required but has no value.');
        }

        if ($this->Index !== null) {
            $writer->writeVarint($stream, 56);
            $writer->writeVarint($stream, $this->Index);
        }

        if ($this->IsFormal !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeBool($stream, $this->IsFormal);
        }

        if ($this->XsdUrl !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->XsdUrl);
        }

        if ($this->UserDataXsdUrl !== null) {
            $writer->writeVarint($stream, 42);
            $writer->writeString($stream, $this->UserDataXsdUrl);
        }

        if ($this->SignerInfo !== null) {
            $writer->writeVarint($stream, 50);
            $writer->writeVarint($stream, $this->SignerInfo->serializedSize($sizeContext));
            $this->SignerInfo->writeTo($context);
        }

        if ($this->MetadataItems !== null) {
            foreach ($this->MetadataItems as $val) {
                $writer->writeVarint($stream, 26);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->EncryptedMetadataItems !== null) {
            foreach ($this->EncryptedMetadataItems as $val) {
                $writer->writeVarint($stream, 34);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->Index = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->IsFormal = $reader->readBool($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->XsdUrl = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->UserDataXsdUrl = $reader->readString($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Types\SignerInfo();

                $this->SignerInfo = $innerMessage;

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem();

                if ($this->MetadataItems === null) {
                    $this->MetadataItems = new \Protobuf\MessageCollection();
                }

                $this->MetadataItems->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentMetadataItem();

                if ($this->EncryptedMetadataItems === null) {
                    $this->EncryptedMetadataItems = new \Protobuf\MessageCollection();
                }

                $this->EncryptedMetadataItems->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->Index !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->Index);
        }

        if ($this->IsFormal !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->XsdUrl !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->XsdUrl);
        }

        if ($this->UserDataXsdUrl !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->UserDataXsdUrl);
        }

        if ($this->SignerInfo !== null) {
            $innerSize = $this->SignerInfo->serializedSize($context);

            $size += 1;
            $size += $innerSize;
            $size += $calculator->computeVarintSize($innerSize);
        }

        if ($this->MetadataItems !== null) {
            foreach ($this->MetadataItems as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->EncryptedMetadataItems !== null) {
            foreach ($this->EncryptedMetadataItems as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->Index = null;
        $this->IsFormal = null;
        $this->XsdUrl = null;
        $this->UserDataXsdUrl = null;
        $this->SignerInfo = null;
        $this->MetadataItems = null;
        $this->EncryptedMetadataItems = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \AgentSIB\Diadoc\Api\Proto\Documents\Types\DocumentTitle) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->Index = ($message->Index !== null) ? $message->Index : $this->Index;
        $this->IsFormal = ($message->IsFormal !== null) ? $message->IsFormal : $this->IsFormal;
        $this->XsdUrl = ($message->XsdUrl !== null) ? $message->XsdUrl : $this->XsdUrl;
        $this->UserDataXsdUrl = ($message->UserDataXsdUrl !== null) ? $message->UserDataXsdUrl : $this->UserDataXsdUrl;
        $this->SignerInfo = ($message->SignerInfo !== null) ? $message->SignerInfo : $this->SignerInfo;
        $this->MetadataItems = ($message->MetadataItems !== null) ? $message->MetadataItems : $this->MetadataItems;
        $this->EncryptedMetadataItems = ($message->EncryptedMetadataItems !== null) ? $message->EncryptedMetadataItems : $this->EncryptedMetadataItems;
    }


}

